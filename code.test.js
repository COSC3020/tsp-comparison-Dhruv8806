const fs = require('fs');
const assert = require('assert');

eval(fs.readFileSync('code.js') + '');

function runTests(distanceMatrices) {
    distanceMatrices.forEach((dm, index) => {
        console.log(`Test Case ${index + 1}`);
        console.time("Held-Karp");
        console.log("Test HK: ", tsp_hk(dm));
        console.timeEnd("Held-Karp");
        console.time("Local Search");
        console.log("Test LS: ", tsp_ls(dm));
        console.timeEnd("Local Search");
        console.log("");
    });
}

// Example distance matrices
const distanceMatrices = [

    // Single-node graph
    [
        [1]
    ],
    // 2-node graph
    [
        [0, 1],
        [2, 0]
    ],
    // 3-node graph
    [
        [0, 1, 2],
        [1, 0, 2],
        [2, 5, 0]
    ],
    // 4-node graph
    [
        [0, 1, 2, 8],
        [1, 0, 3, 5],
        [2, 4, 0, 9],
        [3, 3, 6, 0]
    ],
    // 5-node graph
    [
        [0,3,4,2,9],
        [3,0,4,6,2],
        [4,4,0,5,19],
        [2,6,5,0,2],
        [7,3,8,6,1]
    ],

    // 6-node graph
    [  
       [0, 1, 2, 3, 1, 2],
       [1, 0, 2, 1, 2, 2],
       [2, 2, 0, 2, 1, 4],
       [3, 4, 1, 0, 2, 6],
       [3, 2, 3, 1, 0, 2],
       [3, 2, 3, 1, 6, 0] 
    ],

    // 7-node graph
    [
        [0, 2, 5, 8, 3, 7, 1],
        [2, 0, 6, 4, 2, 9, 10],
        [5, 6, 0, 11, 7, 5, 12],
        [8, 4, 11, 0, 13, 8, 6],
        [3, 2, 7, 13, 0, 4, 15],
        [7, 9, 5, 8, 4, 0, 16],
        [1, 10, 12, 6, 15, 16, 0]
    ],

   
    // 8-node graph

    [
        [0, 3, 7, 2, 6, 8, 1, 9],
        [3, 0, 5, 10, 12, 4, 7, 2],
        [7, 5, 22, 15, 8, 3, 6, 11],
        [2, 10, 15, 0, 9, 7, 14, 9],
        [6, 12, 18, 9, 12, 10, 5, 29],
        [8, 4, 3, 7, 10, 2, 12, 8],
        [1, 7, 16, 14, 5, 12, 0, 4],
        [12, 2, 11, 13, 6, 8, 4, 13]
    ],
    // 9-node graph
    [
        [0, 1, 2, 3, 4, 5, 6, 7, 8],
        [1, 0, 9, 10, 11, 12, 13, 14, 15],
        [2, 9, 0, 16, 17, 18, 19, 20, 8],
        [3, 10, 16, 0, 22, 23, 24, 25, 9],
        [4, 11, 17, 22, 0, 27, 28, 29, 30],
        [5, 12, 18, 23, 27, 0, 31, 32, 33],
        [6, 13, 19, 24, 28, 31, 0, 34, 20],
        [7, 14, 20, 25, 29, 32, 34, 0, 19],
        [8, 15, 21, 26, 30, 33, 35, 36, 0]
    ],
      
    // 10-node graph
    [
        [0, 3, 7, 2, 6, 8, 1, 9, 4, 5],
        [3, 0, 5, 10, 12, 4, 7, 2, 11, 13],
        [7, 5, 0, 15, 8, 3, 6, 11, 16, 17],
        [2, 10, 15, 0, 9, 7, 14, 13, 18, 19],
        [6, 12, 8, 9, 0, 10, 5, 6, 20, 21],
        [8, 4, 3, 7, 10, 0, 12, 8, 22, 19],
        [1, 7, 6, 14, 5, 12, 0, 4, 24, 25],
        [9, 2, 11, 13, 6, 8, 4, 0, 26, 31],
        [4, 11, 16, 18, 20, 22, 24, 26, 0, 28],
        [5, 13, 17, 19, 21, 23, 25, 27, 28, 0]
    ],


    // 11-node graph
    [
        [0, 3, 7, 2, 6, 8, 1, 9, 4, 5, 10],
        [3, 0, 5, 10, 12, 4, 7, 2, 11, 13, 14],
        [7, 5, 0, 15, 8, 3, 6, 11, 16, 17, 18],
        [2, 10, 15, 0, 9, 7, 14, 13, 19, 20, 21],
        [6, 12, 8, 9, 0, 10, 5, 6, 22, 23, 24],
        [8, 4, 3, 7, 10, 0, 12, 8, 25, 26, 27],
        [1, 7, 6, 14, 5, 12, 0, 4, 28, 29, 30],
        [9, 2, 11, 13, 6, 8, 4, 0, 31, 32, 33],
        [4, 11, 16, 19, 22, 25, 28, 31, 0, 34, 35],
        [5, 13, 17, 20, 23, 26, 29, 32, 34, 0, 36],
        [10, 14, 18, 21, 24, 27, 30, 33, 35, 36, 0]
    ],

    // 12-node graph
    [
        [0, 1, 2, 3, 1, 2, 4, 1, 2, 1, 8, 2],
        [1, 0, 2, 1, 2, 2, 2, 2, 5, 2, 1, 1],
        [2, 2, 0, 2, 1, 4, 9, 7, 2, 3, 7, 2],
        [3, 4, 1, 0, 2, 6, 7, 1, 1, 2, 1, 2],
        [3, 2, 3, 1, 0, 2, 5, 3, 1, 9, 9, 5],
        [3, 2, 3, 1, 6, 0, 4, 8, 57, 1, 2, 3],
        [3, 2, 3, 1, 6, 2, 0, 2, 7, 2, 2, 28],
        [3, 2, 3, 1, 6, 2, 4, 0, 2, 3, 2, 9],
        [3, 2, 3, 1, 6, 2, 4, 9, 0, 2, 2, 33],
        [3, 2, 3, 1, 6, 2, 4, 9, 1, 0, 5, 67],
        [3, 2, 3, 1, 6, 2, 4, 9, 1, 2, 0, 5],
        [3, 2, 3, 1, 6, 2, 4, 9, 1, 2, 2, 0]
    ],
      

    //13-node graph

    [ 
       [0, 1, 2, 3, 1, 2, 4, 1, 2, 1, 8, 2, 2],
       [1, 0, 2, 1, 2, 2, 2, 2, 5, 2, 1, 1, 2],
       [2, 2, 0, 2, 1, 4, 9, 7, 2, 3, 7, 2, 2],
       [3, 4, 1, 0, 2, 6, 7, 1, 1, 2, 1, 2, 2],
       [3, 2, 3, 1, 0, 2, 5, 3, 1, 9, 9, 5, 2],
       [3, 2, 3, 1, 6, 0, 4, 8, 2, 1, 2, 3, 2],
       [3, 2, 3, 1, 6, 2, 0, 2, 7, 2, 2, 7, 2],
       [3, 2, 3, 1, 6, 2, 4, 0, 2, 3, 2, 9, 2],
       [3, 2, 3, 1, 6, 2, 4, 9, 0, 2, 2, 2, 2],
       [3, 2, 3, 1, 6, 2, 4, 9, 1, 0, 5, 3, 2],
       [3, 2, 3, 1, 6, 2, 4, 9, 1, 2, 0, 5, 4],
       [3, 2, 3, 1, 6, 2, 4, 9, 1, 2, 2, 0, 2], 
       [1, 2, 2, 1, 2, 2, 2, 2, 5, 2, 1, 1, 0]
    ],

    
    
];


// Run tests on the provided distance matrices
runTests(distanceMatrices);


//Inspired from Wyo-kaitlyn implementation 
